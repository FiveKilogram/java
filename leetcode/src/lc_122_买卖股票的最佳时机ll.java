/*
 * Copyright (c) 2017 maoyan.com
 * All rights reserved.
 *
 */

/**
 * 买卖股票的最佳时机ll
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
 * 示例
 * 1: 输入: [7,1,5,3,6,4]
 * 输出: 7
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
 *
 * 示例 2:
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 *
 * 示例 3:
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 *
 *
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 示例 1: 输入: [7,1,5,3,6,4] 输出: 7
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
 * 示例 2: 输入: [1,2,3,4,5] 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 *
 * https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/
 *
 * @author luweiliang
 * @created 2020/3/27
 */
public class lc_122_买卖股票的最佳时机ll {

    /**
     * 解题思路：
     * 股票买卖策略：
     * 单独交易日： 设今天价格p1、明天价格p2，则今天买入、明天卖出可赚取金额p2−p1 （负值代表亏损）。
     * 连续上涨交易日： 设此上涨交易日股票价格分别为p1,p2,...,pn，则第一天买最后一天卖收益最大，即pn−p1；
     * 等价于每天都买卖，即pn−p1=(p2−p1)+(p3−p2)+...+(pn−pn−1)。连续下降交易日： 则不买卖收益最大，即不会亏钱。
     *
     * 算法流程：
     * 遍历整个股票交易日价格列表 price，策略是所有上涨交易日都买卖（赚到所有利润），所有下降交易日都不买卖（永不亏钱）。
     * 设 tmp 为第 i-1 日买入与第 i 日卖出赚取的利润，即 tmp = prices[i] - prices[i - 1] ；
     * 当该天利润为正 tmp > 0，则将利润加入总利润 profit；当利润为0或为负，则直接跳过；遍历完成后，返回总利润 profit。
     *
     * 时间复杂度O(N) ： 只需遍历一次price；
     * 空间复杂度O(1) ： 变量使用常数额外空间。
     * @param prices
     * @return
     */
    public static int maxProfit(int[] prices){
        if (prices == null || prices.length <= 1) return 0;
        int maxPrice = 0;
        for (int i = 1; i < prices.length; i ++) {
            int temp = prices[i] - prices[i - 1];
            if (temp > 0){
                maxPrice += temp;
            }
        }
        return maxPrice;
    }


    /**
     * 动态规划
     * 想到动态规划的原因是：可以用贪心算法解决的问题，一般情况下都可以用动态规划。因此，不妨从 “状态”、“状态转移方程” 的角度考虑一下，
     * 使用动态规划的思路解决这道问题。根据 「力扣」第 121 题的思路，需要设置一个二维矩阵表示状态。
     *
     * 第 1 步：定义状态
     * 状态 dp[i][j] 定义如下
     * 第一维 i 表示索引为 i 的那一天（具有前缀性质，即考虑了之前天数的收益）能获得的最大利润
     * 第二维 j 表示索引为 i 的那一天是持有股票，还是持有现金。这里 0 表示持有现金（cash），1 表示持有股票（stock）。
     *
     * 第 2 步：思考状态转移方程
     * 状态从持有现金（cash）开始，到最后一天我们关心的状态依然是持有现金（cash）；
     * 每一天状态可以转移，也可以不动。（状态转移方程写在代码中）
     * 说明：
     * 因为不限制交易次数，除了最后一天，每一天的状态可能不变化，也可能转移；
     * 写代码的时候，可以不用对最后一天单独处理，输出最后一天，状态为 0 的时候的值即可。
     *
     * 第 3 步：确定起始
     * 起始的时候：如果什么都不做，dp[0][0] = 0；如果买入股票，当前收益是负数，即 dp[0][1] = -prices[i]；
     * 第 4 步：确定终止
     * 终止的时候，上面也分析了，输出 dp[len - 1][0]，因为一定有 dp[len - 1][0] > dp[len - 1][1]。
     *
     * 时间复杂度：O(N)，这里N 表示股价数组的长度。
     * 空间复杂度：O(1)，分别使用两个滚动变量，将一维数组状态压缩到常数。

     * @param prices
     * @return
     */
    public int maxProfit1(int[] prices) {
        int len = prices.length;
        if (len < 2) {
            return 0;
        }

        // cash：持有现金
        // hold：持有股票
        // 状态转移：cash → hold → cash → hold → cash → hold → cash

        int cash = 0;
        int hold = -prices[0];

        int preCash = cash;
        int preHold = hold;
        for (int i = 1; i < len; i++) {
            cash = Math.max(preCash, preHold + prices[i]);
            hold = Math.max(preHold, preCash - prices[i]);

            preCash = cash;
            preHold = hold;
        }
        return cash;
    }

    /**
     * 动态规划（通用）
     *
     * 第 1 步：定义状态
     * 状态 dp[i][j] 定义如下：
     * dp[i][j] 表示到下标为 i 的这一天，持股状态为 j 时，我们手上拥有的最大现金数。
     * 注意：限定持股状态为 j 是为了方便推导状态转移方程，这样的做法满足 无后效性。
     * 其中：
     * 第一维 i 表示下标为 i 的那一天（ 具有前缀性质，即考虑了之前天数的交易 ）
     * 第二维 j 表示下标为 i 的那一天是持有股票，还是持有现金。这里 0 表示持有现金（cash），1 表示持有股票（stock）。
     *
     * 第 2 步：思考状态转移方程
     * 状态从持有现金（cash）开始，到最后一天我们关心的状态依然是持有现金（cash）；
     * 每一天状态可以转移，也可以不动。状态转移用下图表示：
     * （状态转移方程写在代码中）
     * 说明：
     * 由于不限制交易次数，除了最后一天，每一天的状态可能不变化，也可能转移；
     * 写代码的时候，可以不用对最后一天单独处理，输出最后一天，状态为 0 的时候的值即可。
     *
     * 第 3 步：确定初始值
     * 起始的时候：
     * 如果什么都不做，dp[0][0] = 0；
     * 如果持有股票，当前拥有的现金数是当天股价的相反数，即 dp[0][1] = -prices[i]；
     *
     * 第 4 步：确定输出值
     * 终止的时候，上面也分析了，输出 dp[len - 1][0]，因为一定有 dp[len - 1][0] > dp[len - 1][1]。
     * @param prices
     * @return
     */
    public static int maxProfit2(int[] prices) {
        int len = prices.length;
        if (len < 2) {
            return 0;
        }

        // 0：持有现金
        // 1：持有股票
        // 状态转移：0 → 1 → 0 → 1 → 0 → 1 → 0
        int[][] dp = new int[len][2];

        dp[0][0] = 0;
        dp[0][1] = -prices[0];

        for (int i = 1; i < len; i++) {
            // 这两行调换顺序也是可以的
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }
        return dp[len - 1][0];
    }

    public static void main(String[] args) {
        int[] array = {7,1,5,3,6,4};
        int[] array1 = {7,6,4,3,1};
        System.out.println(maxProfit(array));
        System.out.println(maxProfit2(array));
    }
}
